<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="insert, update, delete는 이걸 사용하세요!" enabled="true" name="jdbc1">&#13;
		boolean isSuccess = false;&#13;
		&#13;
		Connection con = null;&#13;
		PreparedStatement pstmt = null;&#13;
		&#13;
		&#13;
		try {&#13;
			con = ConnLocator.getConnection();&#13;
			StringBuffer sql = new StringBuffer();&#13;
			sql.append("${cursor}");&#13;
			sql.append("");&#13;
			sql.append("");&#13;
	&#13;
			pstmt = con.prepareStatement(sql.toString());&#13;
			int index =0;&#13;
&#13;
			pstmt.setInt(++index,);&#13;
			pstmt.seString(++index,);			&#13;
&#13;
			pstmt.executeUpdate();&#13;
			&#13;
			isSuccess = true;&#13;
		} catch (SQLException e) {&#13;
			// TODO Auto-generated catch block&#13;
			e.printStackTrace();&#13;
		}finally {&#13;
			try {&#13;
				&#13;
				if (pstmt != null) pstmt.close();&#13;
				if (con != null) con.close();&#13;
&#13;
			} catch (SQLException e) {&#13;
&#13;
			}&#13;
		}&#13;
		return isSuccess;		&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Select일경우 반환값이 ArrayList일때" enabled="true" name="jdbc2">	ArrayList&lt;?&gt; list = new ArrayList&lt;?&gt;();&#13;
&#13;
		Connection con = null;&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet rs = null;&#13;
		try {&#13;
			con = ConnLocator.getConnection();&#13;
			StringBuffer sql = new StringBuffer();&#13;
			sql.append("${cursor} ");&#13;
			sql.append(" ");&#13;
			sql.append(" ");&#13;
			sql.append(" ");&#13;
&#13;
			pstmt = con.prepareStatement(sql.toString());&#13;
			int index = 0;&#13;
			pstmt.setInt(++index, );&#13;
			pstmt.setString(++index, );&#13;
&#13;
			rs = pstmt.executeQuery();&#13;
			while (rs.next()) {&#13;
				index = 0;&#13;
				int x = rs.getInt(++index);&#13;
				String y = rs.getString(++index);&#13;
			&#13;
				list.add(new XXXDto(x,y));&#13;
&#13;
			}&#13;
		} catch (SQLException e) {&#13;
			// TODO Auto-generated catch block&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			try {&#13;
&#13;
				if (rs != null) rs.close();&#13;
				if (pstmt != null) pstmt.close();&#13;
				if (con != null) con.close();&#13;
&#13;
			} catch (SQLException e) {&#13;
&#13;
			}&#13;
		}&#13;
		return list;&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Select일 경우 객체를 한개 반환할때 사용한다." enabled="true" name="jdbc3">${return_type} dto = null;&#13;
&#13;
		Connection con = null;&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet rs = null;&#13;
		try {&#13;
			con = ConnLocator.getConnection();&#13;
			StringBuffer sql = new StringBuffer();&#13;
			sql.append(" ");&#13;
			sql.append(" ");&#13;
			sql.append(" ");&#13;
			&#13;
			pstmt = con.prepareStatement(sql.toString());&#13;
			int index = 0;&#13;
&#13;
			pstmt.setInt(++index, );&#13;
			pstmt.setString(++index, );&#13;
			rs = pstmt.executeQuery();&#13;
			if (rs.next()) {&#13;
				index = 0;&#13;
				int x = rs.getInt(++index);&#13;
				String y = rs.getString(++index);&#13;
			&#13;
				dto = new ${return_type}(x,y);&#13;
&#13;
			}&#13;
		} catch (SQLException e) {&#13;
			// TODO Auto-generated catch block&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			try {&#13;
&#13;
				if (rs != null) rs.close();&#13;
				if (pstmt != null) pstmt.close();&#13;
				if (con != null) con.close();&#13;
&#13;
			} catch (SQLException e) {&#13;
&#13;
			}&#13;
		}&#13;
		return dto;&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="singleton">public class EmpDao {&#13;
	private static ${primary_type_name} single;&#13;
	private  ${primary_type_name}() {}&#13;
	&#13;
	public static ${primary_type_name} getInstance() {&#13;
		if(single == null) {&#13;
			single = new  ${primary_type_name}();&#13;
		}&#13;
		return single;&#13;
	}&#13;
	</template></templates>